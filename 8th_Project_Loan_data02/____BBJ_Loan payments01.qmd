---
title: "Loan payments data"
format: html
editor: visual
---

출처 : https://www.kaggle.com/datasets/zhijinzhai/loandata

## 박병준

| 변수명             | 해석(의미)                                       |
|--------------------|--------------------------------------------------|
| **Loan_ID**        | 대출한 고객의 고유한 ID                          |
| **loan_status**    | 이번 분석의 타겟 변수, 상환 여부를 나타냄        |
| **Principal**      | 고객이 대출받은 금액                             |
| **terms**          | 대출금 지급까지 걸린 기간                        |
| **effective_date** | 실제 계약 효과가 발휘하기 시작한 날짜            |
| **due_date**       | 대출금 납부 기한 날짜                            |
| **paid_off_time**  | 고객이 은행에 모두 상환한 날짜, 시간             |
| **past_due_days**  | 고객이 은행에 대출금을 모두 상환하는데 걸린 기간 |
| **age**            | 고객의 나이                                      |
| **education**      | 고객의 교육 수준                                 |
| **Gender**         | 고객의 성별                                      |

데이터 확인, 전처리

```{r}
library(dplyr)
df <- read.csv('Loan payments data.csv')
# str(df)

df$loan_status <- factor(df$loan_status)
df$effective_date <- factor(df$effective_date)
df$due_date <- factor(df$due_date)
df$paid_off_time <- factor(df$paid_off_time)
df$education <- factor(df$education)
df$Gender <- factor(df$Gender)
str(df)

cat("\n")

sel_df <- df %>%
  select("loan_status", "Principal", "terms", "age", "education", "Gender")
str(sel_df)
View(sel_df)
```

EDA

```{r}
# 수치형 자료끼리 산점도, boxplot
# 범주형 자료끼리 barplot, table

```

결측치 확인

```{r}
# library(VIM)
# aggr(sel_df, prop = FALSE, # 빈도수 또는 비율 출력, FALSE : 빈도
#     combined = TRUE, # missing value 있는 plot과 없는 plot 2개를 하나로 결합할지 안 할지
#     numbers = TRUE, # plot에 정확한 count number 출력 여부
#     sortVars = TRUE, # console window에 변수 별로 missing value count를 출력할지 안 할지
#     sorCombs = TRUE) # 결합한 plot의 출력값에서 NA개수를 우선해서 출력

# past_due_days 결측치 300개
# sel_df$past_due_days <- mean(sel_df$past_due_days, na.rm = T)
```

대출상환 성공이냐, 실패냐? 이항 로지스틱 회귀분석

```{r}
# sel_df$loan_status <- factor(ifelse(sel_df$loan_status == "PAIDOFF", "Success", "Failure"))
sel_df <- s
levels(sel_df$loan_status) # SUCCESS or FAILURE, 실제값

model <- glm(loan_status ~ ., data = sel_df,
             family = binomial(link = "logit"))

pred <- factor(ifelse(
  model$fitted.values > 0.5, "pred-Success", "pred-Failure")) # 예측값

tab <- table(sel_df$loan_status, pred)
tab

TP <- tab[2, 2] # True, Positive
TN <- tab[1, 1]
FP <- tab[2, 1]
FN <- tab[1, 2] # False, Negative

# 분류 모델의 성능 평가 지표: Evaluation Metric
accuracy <- (TP + TN) / (TP + TN + FP + FN) # 정확도
accuracy

precision <- TP / (TP + FP) # 정밀도
precision

recall <- TP / (TP + FN) # 재현율
recall

library(pROC)
roc(loan_status ~ model$fitted.values, data = sel_df,
    plot = TRUE, main = "ROC CURVE", col = 'pink')

# 전체를 training data로 잡아서 지나치게 깔끔함.
```

```{r}
# 80 : 20 비율, 400개 : 100개
test_index <- sample(1:500, 100, replace = F) # 1 ~ 500 중 100개, replace = F : 중복추출 X
training <- sel_df[-test_index, ]
test <- sel_df[test_index, ]

model <- glm(loan_status ~ ., data = training,
             family = binomial(link = "logit"))

pred <- factor(ifelse(
  predict(model, test[, loan_status], type = 'response')> 0.5, "pred-Success",
  "pred-Failure")) # 예측값
# predict() : type = "response"를 반환값으로 받음.

tab <- table(test$loan_status, pred)
tab

TP <- tab[2, 2] # True, Positive
TN <- tab[1, 1]
FP <- tab[2, 1]
FN <- tab[1, 2] # False, Negative

# 분류 모델의 성능 평가 지표: Evaluation Metric
accuracy <- (TP + TN) / (TP + TN + FP + FN) # 정확도
accuracy

precision <- TP / (TP + FP) # 정밀도
precision

recall <- TP / (TP + FN) # 재현율
recall

library(pROC)
roc(test$loan_status ~ predict(model, test[, -1], type = 'response'),
    plot = TRUE, main = "ROC CURVE", col = 'pink')
```
